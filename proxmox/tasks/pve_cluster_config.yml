---
- name: Lookup cluster information
  hcs_company.proxmox.proxmox_query:
    query: cluster/status
  register: _pve_cluster

- name: Identify if the host is already part of a cluster
  ansible.builtin.set_fact:
    _pve_active_cluster: '{{ _pve_cluster | json_query(query) }}'
  when: "_pve_cluster | json_query(query) | ternary(true, false)"
  vars:
    query: "response[?type=='cluster'].name | [0]"

- name: Identify all clusters that the hosts in the specified group may be in
  ansible.builtin.set_fact:
    _pve_found_clusters: "{{ _pve_found_clusters | default([]) | intersect([hostvars[item]['_pve_active_cluster']]) }}"
  with_items: "{{ groups[pve_group] }}"
  when: "'_pve_active_cluster' in hostvars[item]"

- name: Ensure that hosts found are not in multiple existing clusters
  ansible.builtin.assert:
    that:
      - "(_pve_found_clusters | default([]) | length) <= 1"
    msg: "Some or all of the hosts in {{ pve_group }} appear to already be part of two or more different clusters, \
          please ensure groups only have hosts meant to be in one single cluster."

- name: Ensure that, if we find an existing cluster, that it matches the specified cluster name
  ansible.builtin.assert:
    that:
      - "_pve_found_clusters[0] == pve_cluster_clustername"
    msg: "Some or all of the hosts in group '{{ pve_group }}' appear to be in a cluster named \
          '{{ _pve_found_clusters[0] }}', which differs from the specified clustername of \
          '{{ pve_cluster_clustername }}'. Please ensure the clustername is correct. An existing \
          cluster's name cannot be modified."
  when: "(_pve_found_clusters | default([]) | length) == 1"

- name: Initialize a Proxmox cluster
  ansible.builtin.command: >-
    pvecm create {{ pve_cluster_clustername }}
    -link0 {{ pve_cluster_addr0 }}
    {% if pve_cluster_addr1 is defined %}
    -link1 {{ pve_cluster_addr1 }}
    {% endif %}
  args:
    creates: "{{ pve_cluster_conf }}"
  when:
    - "_pve_found_clusters is not defined"
    - "inventory_hostname == groups[pve_group][0]"

- name: Wait for quorum on initialization node
  hcs_company.proxmox.proxmox_query:
    query: cluster/status
  register: _pve_cluster_init
  until: "(_pve_cluster_init | json_query(query)) == 1"
  retries: 5
  delay: 5
  when:
    - "inventory_hostname == groups[pve_group][0]"
  vars:
    query: "response[?type=='cluster'].quorate | [0]"

- name: Include task file for PVE node addition
  ansible.builtin.include_tasks: pve_add_node.yml
  with_items: "{{ groups[pve_group][1:] }}"
  when:
    - "_pve_active_cluster is not defined"
    - "inventory_hostname != groups[pve_group][0]"

- name: Check for PVE cluster HA groups
  hcs_company.proxmox.proxmox_query:
    query: "/cluster/ha/groups"
  register: _ha_group_list
  when: "inventory_hostname == groups[pve_group][0]"

- name: Create PVE cluster HA groups
  ansible.builtin.command: >-
    ha-manager groupadd {{ item.name }}
    -comment "{{ item.comment | default('') }}"
    -nodes "{{ item.nodes }}"
    {% if 'nofailback' in item %}
    -nofailback {{ item.nofailback }}
    {% endif %}
    {% if 'restricted' in item %}
    -restricted {{ item.restricted }}
    {% endif %}
  when:
    - "inventory_hostname == groups[pve_group][0]"
    - item.name not in _ha_group_list.response | json_query("[*].group")
  with_items: "{{ pve_cluster_ha_groups }}"

- name: Update PVE cluster HA groups
  ansible.builtin.command: >-
    ha-manager groupset {{ item.0.name }} -{{ item.1 }} "{{ item.0[item.1] }}"
  when:
    - "inventory_hostname == groups[pve_group][0]"
    - item.0.name in _ha_group_list.response | json_query("[*].group")
    - item.1 in item.0
    - item.0[item.1] != _ha_group_list.response
                        | json_query("[?group=='" + item.0.name + "']." + item.1) | first
  loop: "{{ pve_cluster_ha_groups
            | product(['comment', 'nodes', 'nofailback', 'restricted']) | list }}"

- name: Disable specified Proxmox VE services
  ansible.builtin.systemd:
    name: "{{ item.name }}"
    state: "{{ item.state }}"
    enabled: "{{ item.enabled }}"
    masked: "{{ item.masked }}"
  loop: "{{ pve_disabled_services }}"
  when: pve_disable_services | bool
  notify: reload systemd

...
